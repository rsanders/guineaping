/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */

//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
//function load()
//{
//    dashcode.setupParts();
//
//    pingview.hideScrolldown();
//
//    pingfm = new PingFMAPI();
//
//    setupPingFM();
//
//    setupUI();
//    
//    pingdb.initialize();
//}

//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
    // Stop any timers to prevent CPU usage
    // Remove any preferences as needed
    // widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
    // Stop any timers to prevent CPU usage
    pingview.preExecute();
}

//
// Function: show()
// Called when the widget has been shown
//
function show()
{
    pingview.preExecute();

    // Restart any timers that were stopped on hide
    setTimeout("checkConfig();", 500);
}



if (window.widget) {
    widget.onremove = remove;
    widget.onhide = hide;
    widget.onshow = show;
    widget.onsync = sync;
}

function checkConfig()
{
    if (! pingprefs.isConfigured())
    {
        firstTimeConfiguration();
    }
}

function openPingFM(event)
{
    widget.openURL("http://ping.fm/");
}

function openAppSite(event)
{
    widget.openURL("http://code.google.com/p/pingboard");
}


function openAppKeyPage(event)
{
    widget.openURL("http://ping.fm/key/");
}


function postTextChange()
{
    var count = jQuery('#post_text').val().length;
    jQuery('#character_count').text(String(count));
}

var pingprefs = {
    _makekey: function(key) {
        return widget.identifier + "-" + key;
    },
    
    setPref: function(key, value, useglobal) {
        widget.setPreferenceForKey(value, this._makekey(key) );
        if (useglobal) {
            widget.setPreferenceForKey(value, key);
        }
    },
    
    getPref: function(key, defval, useglobal) {
        var res = widget.preferenceForKey( this._makekey(key) );
        if (res == undefined) {
            if (useglobal) {
                if (widget.preferenceForKey( key ) != undefined) {
                    return widget.preferenceForKey( key );
                } else {
                    return defval;
                }
            } else {
                return defval;
            }
        } else {
            return res;
        }
    },
    
    isConfigured: function() {
        return this.getPref("configured") == "true";
    },
    
    setConfigured: function(val) {
        this.setPref("configured", val ? "true" : "false");
    },
}

function savePrefs()
{
    pingprefs.setPref("pingfm_appkey", pingview.getAppKey(), true);
    pingprefs.setPref("debug", pingview.getDebug());
    pingprefs.setPref("name", pingview.getAccountName());
    
    pingprefs.setPref("configured", "true");
}

function populatePrefs()
{
    pingview.setAppKey(pingprefs.getPref("pingfm_appkey", undefined, true));
    pingview.setDebug(pingprefs.getPref("debug"));
    pingview.setAccountName(pingprefs.getPref("name"));
}

function configDone(event)
{
    // reset custom trigger list
    // makePostTypeMenu(null, null);
    
    savePrefs();
    setupPingFM();

    setTimeout("setupUI();", 200);

    return showFront(event);
}

function doShowBack(event)
{
    populatePrefs();
    showBack(event);
}

function firstTimeConfiguration()
{
    doShowBack();
}


function validateUser(event)
{
    // need to save prefs and setup Ping.FM first so we have the latest key
    savePrefs();
    setupPingFM();

    pingfm.validateUser();
}

function setupPingFM()
{
	console.log("setting up PingFM");
    pingfm.api_key = '62efb891fc6ae7200a2699c566503735';
    pingfm.user_app_key = pingprefs.getPref('pingfm_appkey', undefined, true);
    pingfm.debug = pingprefs.getPref('debug', false) ? '1' : '0';
    
    pingfm.view = pingview;
    
    pingfm.initialize();
}


// this is not a saved pref
function setPostType(event)
{
	console.log("-- setposttype called --, event=" + event);

    var type = event.target.value;

    // separator entry -- reject
    if (type[0] == '-') {
        setTimeout(function() { 
                pingview.setPostMethod(pingprefs.getPref("post_type", "default"));
            }, 200);
        return;
    }

    // change default
    pingfm.post_method = type;
    pingview.setExcludes([]);

    pingview.showPostTypeIcons(type);

    // store for later
    pingprefs.setPref("post_type", type);
}


/**
 *
 *
 * See http://webkit.org/misc/DatabaseExample.html
 */ 
var pingdb = {
    db: null,
    
    initialized: false,
    
    available: true,
    
    initialize: function() {
        if (this.initialized)
            return true;

        this.db = [];

        this.initialized = true;
        return true;
    },
    
    clear: function() {
        this.db = [];
    },
    
    addPing: function(message, destination, other) {
        if (! destination) { destination = 'default' };
        if (! other) other = {};
        
        var item = {message: message, destination: destination, when: new Date()};
        var key;
        for (key in other) {
            var val = other[key];
            if (typeof val == 'function' || item.hasOwnProperty(key)) continue;
            item[key] = val;
        }
        this.db.unshift( item );
    },
    
    listPings: function(count) {
        if (! count) count = 10;
        return this.db;
    },
    
    getPing: function(num) {
        if (this.db.length <= num)
            return null;
        else
            return this.db[num];
    },
    
    countPings: function() {
        return this.db.length;
    },
    
    version: '0.5'
}

function doDebugClick(event)
{
    pingfm.debug = pingview.getDebug() ? '1' : '0';
}

function handleServices(services)
{
    var goodcompletion = function(triggers) { makePostTypeMenu(services, triggers); };
    var badcompletion = function(triggers) { makePostTypeMenu(services, null); };    

    pingfm.getTriggers(goodcompletion, badcompletion);
}
